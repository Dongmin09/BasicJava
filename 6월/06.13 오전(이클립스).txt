04-1 조건문 : if문, switch 문 -> 제어(Control)문

ex) if 는 () , {} 를 쓰는 종류에 따라 쓰임과 문법이 다르다.

조건이 1개일때 if 문, 
조건이 2개일 때 if-else 문, 
조건이 3개이상일 때 if-else, if-else 문

-if 문 :

ex) if ( 조건식) {
	-> 조건식이 true
	실행문 A
	       }
      else { 
 	실행문 B
            }


------------
-swich 문 : 
 변수가 어떤 값을 갖는가에 따라 실행문 선택
 if문 보다 코드가 간결함.
 break 가 나올때까지  실행문을 실행. 
 변수에 들어갈수 있는 타입이 정해져있음. (정수와 문자열만 들어갈 수 있음)

 * 1. 좋지않은 방ㅎ식
	 * int randomNum = (int) (Math.random() * 총개수) + 시작숫자;
	 * 이유 : 
	 * 
	 * 2. 좋은 방식
	 * Random random = new Random();
	 * int randomNum = random.nexInt(총개수) + 시작숫자;
	 * -ex 6이라고 쓰면 0~5까지 숫자를 가져옴. 0~( 괄호안의 숫자 -1까지 만들어줌) 
	 * 게임같은 곳에서 확률적으로 하기위해 많이씀
	 * 
	 * 
	 * 3. 보안 적용
	 * SecureRandom sercureRandom = new SecureRandom();
	 * int randomNum = secureRandom.nextInt(총개수) + 시작숫자;
	 * 
	 * 직접하려고 노력을하고 왠만하면 시간이 걸리더라도 풀어볼것.
	 * 만약 도저히 모르겠으면 참조만하고 다시 자기가 직접 해결해볼것.
	 * 
	 */





04-2 반복문 : for문, while문, do-while(잘안쓰임)문

-for : 반복문일 경우는 제어문 처음으로 다시 돌아가 반복 실행함. 이것을 루핑(looping) 라고 한다/

ex )  for ( [1] 초기화 식; [2] 조건식; [4] 증감식)
{

	조건식이 true 경우  (
	
	[3] 실행문;
}

-중첩 for 문 :
	출력 문을 먼저 생각하고 중복되는 것을 먼저 for으로 정한후 그 후에도 중첩되는 것을
	찾고 다시 for문을 사용할 것

-while문 : 조건식에 따라 반복 여부를 결정

	 true일 경우 계속해서 반복
 	false일 경우 반복종료
 ex) while ( [1] 조건식 ) 
{
	 조건식이 true 경우
 	[2] 실행문;
}

==for문은 정해진 반복횟수를 알때 for문, 모를 경우는 while문을 사용한다.

-do-while 문 : 잘사용하지 않음.

-4)brake 문 : 반복문에서 for문, while문, do-while문의 실행을 중지할 때 사용한다.
ex) 
 ----- 

break;


-5) continue문 : for, while, do-while 문에서만 사용

※ 반복문 안에 잇을 때 break 문과 continue 는 무조건 조건문을 사용함. 
뒤에 명령어가 없을 경우 의미가없음.

과제 :160p~161p 2~7번까지 풀이

 	for (int i=1; i<=100; i++)
	{
		sum +=i;
		
	}
	
	System.out.println("1~100 합 :" + sum);


