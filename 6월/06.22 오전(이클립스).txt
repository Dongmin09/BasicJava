06 클래스

객체 : 물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서 자신의 속성을 가지며
식별 가능한 것

속성(필드) : + 동작 메소드로 구성

클래스 :
 자바의 설계도
 인스턴스 클래스로부터 만들어진 객체
 객체지향 프로그래밍 단계
	클래스 설계 -> 설계된 클래스로 사용될 객체 생성

클래스 선언(명명 규칙)
 -객체 구상 후 클래스 이름을 결정
  - 식별자 작성 규칙에 따라야함
  -하나 이상의 문자로 이루어질것
  - 첫글자에는 숫자가 올 수 없음
  - $, _외의 특수 문자는 사용할 수 없음
  - 자바 키워드는 사용할 수 없음.

클래스 이름 .java'로 소스 파일 생성

	public class 클래스 이름 {
 	

		}

-클래스로부터 객체를 생성

 -new 클래스();
 -new 연산자로 메모리 힙 영역에 객체 생성

 - 객체 생성 후 객체 번지가 리턴
   -클래스 변수에 저장하여 변수 통해 객체 사용 가능.

 ex)
  클래스 변수;
 변수 + new.클래스();


---------------

 필드는 객체의 고유 데이터, 부품 객체, 상태 정보를 저장
 필드를 선얺사고 생성한 뒤 이를 읽고 변경하는 방법을 학습

-필드 
 객체의 고유데이터.


06-3 생성자
 -생성자는 new 연산자로 호출되는 중괄호{} 블록이다.
 객체 생성 시 초기화를 담당한다






// Default Constructor(기본생성자)
Member() {
}


// 매개 값(매개변수)이 있는 생성자
Member(String n, int a){

name =n;
age = a;

}



Member(String i, String pw) {
id = i;
password = pw;
}


-생성자 오버로딩
 
 매개 변수의 타입과 개수가 구분이 된다면 생성자 오버로딩에 해당된다.
 
06-4 메소드


메소드 : 함수라고도함.
메소드 : 선언을 하고 호출을함.
--메소드 구성

 
        [3 반환타입]
ex) [  [3 ] 이름(         [1] 매개 변수          ) {
	[2] 실행문들
	}

1) 리턴 타입
2) 메소드 이름
3) 매개 변수 선언
4) 메소드 실행블록


1) 리턴 타입 
  1. 리턴값이 없을 수도 있음.   ---> void  이름() { **** }
  2. 리턴값이 있는 경우 리턴 타입이 선언부에 명시됨  ----> double 이름() { **** }


2) 매개변수 선언
 
----------------------------------------06.21------------------------------------



메소드 오버로딩

매개변수 : 
Parameter(매개변수) :변수를 연결해준다.
Argument(인수) : 호출할때 넣어주는 값

메소드 정의
void run (int a) {

}
run(10)은 인수.

int a에서 a는 매개 변수.


06-5 인스턴스 멤버와 정적 멤버

// static 이 붙은 필드나 메소드는 바로 직접 사용한다.


--------------------06.22---------------

final 필드와 상수
 
 final 필드 : 초기값이 저장되면 최종값이 되어 프로그램 실행 도중 수정 불가

-final 필드 초기값 주기 
 1) 단순 값일 경우 필드 선언시 초기화(주로 정적필드(상수)일 경우)
 2)객체 생성시 외부 데이터로 초기화 필요한 경우 생성자에서 초기화(주로 인스턴스 필드일 경우)

-인스턴스 final 필드
 객체에 한번 초기화된 데이터를 변경 불가로 만들 경우 ex) 주민번호
 final 타입 필드 { = 초기값} final String


--06-6 패키지와 접근 제한자.
 패키지 : 프로젝트 개발 시 클래스를 체계적으로 관리하기 위해 패키지를 사용함.
	클래스와 클래스의 멤버를 사용범위에 맞게 접근제한자를 활용한다.

 패키지 이름 짓는 요령 (소문자, 도메인 거꾸로 )
 패키지 하위폴더형식을 보는 방법.
 패키지 

 -import문 : new 클래스 후 컨트롤 스페이스.

- 접근 제한자 :



-Getter와 Setter 메소드
 

 * Setter 메소드 : 외부의 값을 받아 필드의 값을 변경하는 것이 목적
	

chocojhkim@daum.net 