객체지향  3요소 5원칙


-------------06.23
println() 일시에만 toString가 기본적으로 실행됨. 생략이 그래서 가능함.

알트 + 시프트 + s : 필드의 set get 자동 생성 , 생성자 생성

6장 연습문제 정답소스코드 보는곳

https://github.com/chopperkim/Basic402.git

07-1 상속

-----------06.24

stackoverflow 개발자 코딩 오류 커뮤니티 사이트


07-2 타입변환과 다형성

다형성 : polymorphism


----------06.27
-상속 : is a  --> 도형 , 원
-포함 : has a -->

07-3 추상클래스
추상클래스라고 해서 추상메소드를 굳이 가질 필요는 없다 하지만
어떤 클래스가 추상 메소드를 가지고 있다면 그 클래스는 반드시 추상클래스가 되어야한다.
 

// 추상클래스를 상속받는 클래스는 반드시 추상메소드를 재정의 해아한다.
 

메소드(생성자) 호출
call : 개발자가 호출
invoke : 코드가 호출


--------------06.28 8장 인터페이스 


인터페이스 : InterFace
(UI/UX) : 중요함
1.객체의 사용방법을 정의한 타입이다.
2. 다양한 객체를 동일한 사용방법으로 이용할  수 잇다
3. 다형성을 구현할수 잇다

인터페이스.
-개발코드는 인터페이스를 통해서 객체와 서로 통신한다.
-인터페이스의 메소드 호출하면 객체의 메소드가 호출된다.
-개발코드를 수정하지 않으면서 객체 교환이 가능하다.

인터페이스 선언
// abstract가 생략되어있음
//private, defult 가 쓰이면 안됨

//public abstract가 기본적으로 생략되어있음/
//필드를 선언할 수 없음

// 단, 값이 변하지않는 상수는 사용할수 있음. 그러므로 public static final 생략 가능
 
ex)
public interface RemoteControl {
	void turnOn(); // public abstract가 생략되어있음

	void turnOff();

	void setVolume(int volume);

	
	public static final String NAME = "abc";  //상수 public static final 생략 가능
	
}

구현 클래스
	// 추상클래스 : 클래스  --> 상속(extends)
	// 인터페이스 : 클래스 --> 구현(implements)




---06.29
08-2 타입변환과 다형성
자동 타입변환 : 구현 객체가 인터페이스 타입으로 변환되는 것
